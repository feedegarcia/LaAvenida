</td>
                            <td class="px-4 py-2 text-right font-medium">
                                $ {{ formatoMoneda(calcularSubtotalCategoria(productos)) }}
                            </td>
                            <td v-if="puedeModificar"></td>
                            <td></td>
                            <td v-if="muestraCheckRecibido"></td>
                        </tr>
                    </template>
                </tbody>
            </table>

            <!-- Total general -->
            <div v-if="puedeVerTotales" class="mt-6 border-t pt-4">
                <div class="flex justify-end items-center">
                    <span class="font-medium mr-4">Total General:</span>
                    <span class="font-bold text-lg">
                        $ {{ formatoMoneda(totalPedido) }}
                    </span>
                </div>
            </div>
        </div>

        <!-- Boton Agregar Productos -->
        <div v-if="puedeModificar" class="mt-4">
            <button @click="mostrarSelectorProductos = true"
                    class="px-4 py-2 text-sm bg-emerald-500 text-white rounded hover:bg-emerald-600">
                Agregar Producto
            </button>
        </div>

        <!-- Modal de Selector de Productos -->
        <TransitionRoot appear :show="mostrarSelectorProductos" as="template">
            <Dialog as="div" @close="mostrarSelectorProductos = false" class="relative z-50">
                <TransitionChild as="template"
                                 enter="duration-300 ease-out"
                                 enter-from="opacity-0"
                                 enter-to="opacity-100"
                                 leave="duration-200 ease-in"
                                 leave-from="opacity-100"
                                 leave-to="opacity-0">
                    <div class="fixed inset-0 bg-black bg-opacity-25" />
                </TransitionChild>

                <div class="fixed inset-0 overflow-y-auto">
                    <div class="flex min-h-full items-center justify-center p-4">
                        <TransitionChild as="template"
                                         enter="duration-300 ease-out"
                                         enter-from="opacity-0 scale-95"
                                         enter-to="opacity-100 scale-100"
                                         leave="duration-200 ease-in"
                                         leave-from="opacity-100 scale-100"
                                         leave-to="opacity-0 scale-95">
                            <DialogPanel class="w-full max-w-2xl transform overflow-hidden rounded-lg bg-white p-6 shadow-xl transition-all">
                                <div class="flex justify-between items-center mb-6">
                                    <h3 class="text-lg font-medium">Agregar Productos</h3>
                                    <button @click="mostrarSelectorProductos = false"
                                            class="text-gray-500 hover:text-gray-700">
                                        <XIcon class="h-5 w-5" />
                                    </button>
                                </div>

                                <!-- Buscador -->
                                <div class="mb-4">
                                    <input type="text"
                                           v-model="busquedaProducto"
                                           placeholder="Buscar por nombre o codigo..."
                                           class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-emerald-500" />
                                </div>

                                <!-- Lista de productos -->
                                <div class="max-h-96 overflow-y-auto">
                                    <div v-if="productosFiltrados.length === 0"
                                         class="text-center py-4 text-gray-500">
                                        No se encontraron productos
                                    </div>
                                    <div v-else
                                         v-for="producto in productosFiltrados"
                                         :key="producto.uniqueKey"
                                         class="p-4 border-b hover:bg-gray-50 flex items-center justify-between">
                                        <div>
                                            <p class="font-medium">{{ producto.nombre }}</p>
                                            <p class="text-sm text-gray-500">
                                                Codigo: {{ producto.codigo }}
                                            </p>
                                        </div>
                                        <div class="flex items-center gap-3">
                                            <input type="number"
                                                   v-model="nuevasSelecciones[producto.producto_id]"
                                                   min="0"
                                                   placeholder="Cantidad"
                                                   class="w-24 px-2 py-1 border rounded text-right" />
                                            <button @click="agregarProducto(producto)"
                                                    v-bind:disabled="!nuevasSelecciones[producto.producto_id]"
                                                    class="px-4 py-2 bg-emerald-500 text-white rounded hover:bg-emerald-600 disabled:opacity-50 disabled:cursor-not-allowed">
                                                Agregar
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-6 flex justify-end">
                                    <button @click="mostrarSelectorProductos = false"
                                            class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded">
                                        Cerrar
                                    </button>
                                </div>
                            </DialogPanel>
                        </TransitionChild>
                    </div>
                </div>
            </Dialog>
        </TransitionRoot>
    </div>
</template>
<script setup>
    import { ref, computed, onMounted, watch } from 'vue';
    import { Dialog, DialogPanel, TransitionChild, TransitionRoot } from '@headlessui/vue';
    import { X as XIcon } from 'lucide-vue-next';
    import { usePedidoStore } from '@/stores/pedidoStateMachine';
    import { useAuthStore } from '@/stores/auth';
    import axios from '@/utils/axios-config';

    const props = defineProps({
        pedido: {
            type: Object,
            required: true
        },
        detalles: {
            type: Array,
            required: true
        },
        puedeModificar: {
            type: Boolean,
            default: false
        },
        puedeVerTotales: {
            type: Boolean,
            default: false
        }
    });

    const emit = defineEmits(['modificacion', 'estado-actualizado']);
    const pedidoStore = usePedidoStore();
    const authStore = useAuthStore();
    const cantidadesSolicitadas = ref({});
    const cantidadesConfirmadas = ref({});
    const productosRecibidos = ref(new Map());

    const totalPedido = computed(() => {
        return props.detalles.reduce((total, detalle) => {
            const cantidad = detalle.cantidad_confirmada || detalle.cantidad_solicitada;
            return total + (detalle.precio_unitario * cantidad);
        }, 0);
    });

    const mostrarSelectorProductos = ref(false);
    const productosDisponibles = ref([]);
    const nuevasSelecciones = ref({});

    const hayProductosSeleccionados = computed(() => {
        return Object.values(nuevasSelecciones.value).some(cantidad => cantidad > 0);
    });

    // Metodos
    const cargarProductosDisponibles = async () => {
        try {
            const response = await axios.get(`/api/pedidos/${props.pedido.pedido_id}/productos/disponibles`);
            productosDisponibles.value = response.data;
        } catch (error) {
            console.error('Error al cargar productos:', error);
        }
    };

    const confirmarAgregarProductos = async () => {
        try {
            const productosParaAgregar = Object.entries(nuevasSelecciones.value)
                .filter(([_, cantidad]) => cantidad > 0)
                .map(([productoId, cantidad]) => ({
                    producto_id: parseInt(productoId),
                    cantidad: parseInt(cantidad),
                }));

            for (const producto of productosParaAgregar) {
                await pedidoStore.agregarProducto(props.pedido.pedido_id, producto);
            }

            mostrarSelectorProductos.value = false;
            nuevasSelecciones.value = {};
            emit('estado-actualizado');
        } catch (error) {
            console.error('Error al agregar productos:', error);
        }

    };
    const agregarProducto = async (producto) => {
        try {
            const datos = {
                producto_id: producto.producto_id,
                cantidad: nuevasSelecciones.value[producto.producto_id],
                precio_unitario: producto.precio_mayorista // Agregar esto
            };

            await pedidoStore.agregarProducto(props.pedido.pedido_id, datos);
            emit('estado-actualizado');
            mostrarSelectorProductos.value = false;
            nuevasSelecciones.value = {}; // Limpiar selecciones despues de agregar
        } catch (error) {
            console.error('Error al agregar producto:', error);
        }
    };

    const calcularSubtotalCategoria = (productos) => {
        return productos.reduce((total, detalle) => {
            const cantidad = detalle.cantidad_confirmada || detalle.cantidad_solicitada;
            return total + (detalle.precio_unitario * cantidad);
        }, 0);
    };

    const muestraCheckRecibido = computed(() => {
        return ['PREPARADO', 'PREPARADO_MODIFICADO'].includes(props.pedido.estado);
    });

    const puedoModificarRecepcion = computed(() => {
        return pedidoStore.rolEnPedido === 'ORIGEN' && muestraCheckRecibido.value;
    });

    const puedoModificarCantidadSegunRol = (rol) => {
        if (!pedidoStore.rolEnPedido || !props.puedeModificar) return false;
        return pedidoStore.rolEnPedido === rol;
    };

    const detallesAgrupados = computed(() => {
        const grupos = {};
        props.detalles.forEach(detalle => {
            if (!grupos[detalle.categoria_nombre]) {
                grupos[detalle.categoria_nombre] = [];
            }
            grupos[detalle.categoria_nombre].push(detalle);
        });
        return grupos;
    });

    const getModificacionStyle = (detalle) => {
        const sucursal = props.pedido?.sucursales?.find(
            s => s.sucursal_id === detalle.modificado_por_sucursal
        );
        return sucursal?.color ? {
            backgroundColor: `${sucursal.color}15`,
            borderLeft: `4px solid ${sucursal.color}`
        } : 'bg-gray-50';
    };

    const getModificadoBadgeStyle = (detalle) => {
        const sucursal = props.pedido?.sucursales?.find(
            s => s.sucursal_id === detalle.modificado_por_sucursal
        );
        return sucursal?.color ? {
            backgroundColor: `${sucursal.color}20`,
            color: sucursal.color
        } : {
            backgroundColor: 'rgb(243, 244, 246)',
            color: 'rgb(107, 114, 128)'
        };
    };

    const getSucursalNombre = (sucursalId) => {
        return props.pedido?.sucursales?.find(s => s.sucursal_id === sucursalId)?.nombre || 'Desconocida';
    };

    const formatoMoneda = (valor) => {
        return new Intl.NumberFormat('es-AR', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(valor);
    };

    const hayCambios = (detalle) => {
        if (pedidoStore.rolEnPedido === 'ORIGEN') {
            return cantidadesSolicitadas.value[detalle.detalle_id] !== undefined &&
                cantidadesSolicitadas.value[detalle.detalle_id] !== detalle.cantidad_solicitada;
        }
        if (pedidoStore.rolEnPedido === 'FABRICA') {
            return cantidadesConfirmadas.value[detalle.detalle_id] !== undefined &&
                cantidadesConfirmadas.value[detalle.detalle_id] !== detalle.cantidad_confirmada;
        }
        return false;
    };

    const guardarCambios = async (detalle) => {
        try {
            let cantidad;
            if (pedidoStore.rolEnPedido === 'ORIGEN') {
                cantidad = cantidadesSolicitadas.value[detalle.detalle_id];
            } else if (pedidoStore.rolEnPedido === 'FABRICA') {
                cantidad = cantidadesConfirmadas.value[detalle.detalle_id];
            }

            await pedidoStore.modificarCantidadProducto(props.pedido.pedido_id, detalle.detalle_id, cantidad);
            emit('estado-actualizado');
        } catch (error) {
            console.error('Error al guardar cambios:', error);
        }
    };

    const eliminarProducto = async (detalle) => {
        if (!confirm(' Esta seguro que desea eliminar este producto?')) return;

        try {
            await pedidoStore.eliminarProducto(props.pedido.pedido_id, detalle.detalle_id);
            emit('estado-actualizado');
        } catch (error) {
            console.error('Error al eliminar producto:', error);
        }
    };

    const estaRecibido = (detalleId) => {
        return productosRecibidos.value.get(detalleId) || false;
    };

    const busquedaProducto = ref('');

    const productosFiltrados = computed(() => {
        if (!productosDisponibles.value) return [];
        const busqueda = busquedaProducto.value.toLowerCase().trim();

        return productosDisponibles.value
            .filter(producto => {
                const nombreCoincide = producto.nombre.toLowerCase().includes(busqueda);
                const codigoCoincide = producto.codigo?.toLowerCase().includes(busqueda);
                return nombreCoincide || codigoCoincide;
            })
            .map(producto => ({
                ...producto,
                uniqueKey: `${producto.producto_id}-${producto.codigo}-${Date.now()}`
            }));
    });

    const marcarRecibido = async (detalle) => {
        if (!puedoModificarRecepcion.value) return;

        try {
            const nuevoEstado = !estaRecibido(detalle.detalle_id);
            await pedidoStore.marcarProductoRecibido(props.pedido.pedido_id, detalle.detalle_id, nuevoEstado);
            const newMap = new Map(productosRecibidos.value);
            newMap.set(detalle.detalle_id, nuevoEstado);
            productosRecibidos.value = newMap;
        } catch (error) {
            console.error('Error al marcar producto como recibido:', error);
        }
    };
    watch(mostrarSelectorProductos, (nuevoValor) => {
        if (nuevoValor) {
            cargarProductosDisponibles();
        }
    });
    onMounted(() => {
        const initialState = new Map();
        props.detalles.forEach(detalle => {
            initialState.set(detalle.detalle_id, detalle.recibido === 1);
        });
        productosRecibidos.value = initialState;
    });
</script>